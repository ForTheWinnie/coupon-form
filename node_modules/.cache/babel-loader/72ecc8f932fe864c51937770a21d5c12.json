{"ast":null,"code":"var _jsxFileName = \"/Users/winnie/Documents/GitHub/coupon-form/src/components/form/form.js\";\nimport React from 'react';\nimport { Form, useField, Formik } from 'formik'; // used Formik for its lightweight & scalability\n\nimport { FormColumn } from '../../Styles';\nimport * as Yup from 'yup'; // used Yup for validation\n// elements for email input field\n\nconst EmailInput = ({\n  label,\n  ...props\n}) => {\n  const [field, meta] = useField(props); // return component & display error if there's an error\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id || props.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    className: \"text-input\"\n  }, field, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  })), meta.touched && meta.error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, meta.error) : null);\n};\n\nfunction SubscriptionForm() {\n  return /*#__PURE__*/React.createElement(FormColumn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      email: ''\n    },\n    validationSchema: Yup.object({\n      email: Yup.string().email('Email format should be abc@domain.com').max(50, 'Must be 50 chars or less').required('This field is required')\n    }) // POST to placeholder API when the form is submitted\n    ,\n    onSubmit: (values, {\n      setSubmitting,\n      resetForm\n    }) => {\n      resetForm();\n      setSubmitting(false);\n      fetch('https://jsonplaceholder.typicode.com/posts', {\n        method: 'POST',\n        body: JSON.stringify({\n          email: values.email\n        }),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(json => console.log(json)); // verify json (email) in console\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, props => /*#__PURE__*/React.createElement(Form, {\n    className: \"newsletterForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(EmailInput, {\n    label: \"Email\",\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"abc@email.com\",\n    \"data-testid\": \"test-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, props.isSubmitting ? 'Joining...' : 'Join the Movement'), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"footnote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, \"We won't spam you. Unsubscribe at anytime.\"))));\n}\n\nexport default SubscriptionForm;","map":{"version":3,"sources":["/Users/winnie/Documents/GitHub/coupon-form/src/components/form/form.js"],"names":["React","Form","useField","Formik","FormColumn","Yup","EmailInput","label","props","field","meta","id","name","touched","error","SubscriptionForm","email","object","string","max","required","values","setSubmitting","resetForm","fetch","method","body","JSON","stringify","headers","then","response","json","console","log","isSubmitting"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, useField, Formik } from 'formik'; // used Formik for its lightweight & scalability\nimport { FormColumn } from '../../Styles';\nimport * as Yup from 'yup'; // used Yup for validation\n\n// elements for email input field\nconst EmailInput = ({ label, ...props }) => {\n    const [field, meta] = useField(props);\n  \n    // return component & display error if there's an error\n    return(\n      <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input className=\"text-input\" {...field} {...props} /> \n      \n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ):null}\n      </>\n    )\n  }\n\nfunction SubscriptionForm () {\n    return (\n        <FormColumn>\n            <Formik initialValues={{email:''}} validationSchema={Yup.object({\n            email: Yup.string()\n                .email('Email format should be abc@domain.com')\n                .max(50, 'Must be 50 chars or less')\n                .required('This field is required')\n            })}\n            // POST to placeholder API when the form is submitted\n            onSubmit={(values, { setSubmitting, resetForm }) => {\n            resetForm();\n            setSubmitting(false);\n            fetch('https://jsonplaceholder.typicode.com/posts', {\n                method: 'POST',\n                body: JSON.stringify({\n                    email: values.email\n                }),\n                headers: {\n                    \"Content-type\": \"application/json\"\n                }\n            })\n            .then(response => response.json())\n            .then(json => console.log(json)) // verify json (email) in console\n            }}\n            >\n                \n            {props => (\n                <Form className=\"newsletterForm\">\n                <EmailInput label=\"Email\" name=\"email\" type=\"email\" placeholder=\"abc@email.com\" data-testid=\"test-input\"></EmailInput>\n                <button type=\"submit\">{props.isSubmitting ? 'Joining...' : 'Join the Movement'}</button>\n                <p className=\"footnote\">We won't spam you. Unsubscribe at anytime.</p>\n                </Form>\n            )}\n            </Formik>\n        </FormColumn>\n    )\n}\n\nexport default SubscriptionForm;"]},"metadata":{},"sourceType":"module"}